#include "vector3d.h"
#include <iostream>
#include <cassert>
using namespace std;

/// @brief Тесты семантики копирования
void copy_tests() {

    cout << "ТЕСТЫ СЕМАНТИКИ КОПИРОВАНИЯ" << endl << endl;

    // ПРОВЕРКА КОНСТРУКТОРА КОПИРОВАНИЯ
   
    // Создаем первый вектор
    Vector3D vector1 = Vector3D();
    vector1[0] = 5.2;
    vector1[1] = 5.3;
    vector1[2] = 5.4;

    // Создаем второй вектор с помощью семантики копирования
    Vector3D vector2(vector1);

    // Умный указатель первого вектора должен существовать
    if (vector1.coords == nullptr) {
        cerr << "Ошибка! Умный указатель первого вектора не существует" << endl;
    }
    // Умный указатель второго вектора должен существовать
    if (vector2.coords == nullptr) {
        cerr << "Ошибка! Умный указатель второго вектора не существует" << endl;
    }

    // Проверим что оба вектора содежат одинаковые значения
    assert(vector1[0] == vector2[0]);
    assert(vector1[1] == vector2[1]);
    assert(vector1[2] == vector2[2]);

    cout << "Вектор 1 и Вектор 2 до изменения значения:" <<endl;
    cout << "Вектор 1: " << vector1 << endl;
    cout << "Вектор 2: " << vector2 << endl;

    // Проверим что векторы действительно разные, т.е. при изменении значения
    // в одном векторе, значение другого вектора не меняется
    vector1[0] = 10.0;
    assert(vector1[0] != vector2[0]);

    cout << "Вектор 1 и Вектор 2 после изменения значения:" <<endl;
    cout << "Вектор 1: " << vector1 << endl;
    cout << "Вектор 2: " << vector2 << endl;

    // ПРОВЕРКА ПРИСВАИВАНИЯ КОПИРОВАНИЕМ

    // Создаем третий вектор из первого копирующим присваиванием
    Vector3D vector3;
    vector3 = vector2;

    // Умный указатель второго вектора должен существовать
    if (vector1.coords == nullptr) {
        cerr << "Ошибка! Умный указатель первого вектора не существует" << endl;
    }
    // Умный указатель третьего вектора должен существовать
    if (vector2.coords == nullptr) {
        cerr << "Ошибка! Умный указатель второго вектора не существует" << endl;
    }

    // Проверим что оба вектора содежат одинаковые значения
    assert(vector2[0] == vector3[0]);
    assert(vector2[1] == vector3[1]);
    assert(vector2[2] == vector3[2]);

    cout << "Вектор 2 и Вектор 3 до изменения значения:" <<endl;
    cout << "Вектор 2: " << vector2 << endl;
    cout << "Вектор 3: " << vector3 << endl;

    // Проверим что векторы действительно разные, т.е. при изменении значения
    // в одном векторе, значение другого вектора не меняется
    vector2[0] = 10.0;
    assert(vector2[0] != vector3[0]);

    cout << "Вектор 2 и Вектор 3 после изменения значения:" <<endl;
    cout << "Вектор 2: " << vector2 << endl;
    cout << "Вектор 3: " << vector3 << endl << endl;
}

/// @brief Тесты семантики перемещения
void move_tests() {

    cout << "ТЕСТЫ СЕМАНТИКИ ПЕРЕМЕЩЕНИЯ" << endl << endl;

    // ПРОВЕРКА КОНСТРУКТОРА ПЕРЕМЕЩЕНИЯ

    // Создаем первый вектор
    Vector3D vector1 = Vector3D();
    vector1[0] = 5.2;
    vector1[1] = 5.3;
    vector1[2] = 5.4;

    cout << "Вектор 1: " << vector1 << endl;

    // Создаем второй вектор с помощью семантики перемещения
    Vector3D vector2(move(vector1));

    // Умный указатель первого вектора должен быть удален
    if (vector1.coords != nullptr) {
        cerr << "Ошибка! Умный указатель первого вектора не уничтожился" << endl;
    }
    // Умный указатель второго вектора должен существовать
    if (vector2.coords == nullptr) {
        cerr << "Ошибка! Умный указатель второго вектора не существует" << endl;
    }

    // На всякий случай проверим значения во втором векторе
    assert(vector2[0] == 5.2);
    assert(vector2[1] == 5.3);
    assert(vector2[2] == 5.4);
    
    cout << "Вектор 2, полученный через конструктор перемещения: " << vector2 << endl;

    // ПРОВЕРКА ПРИСВАИВАНИЯ ПЕРЕМЕЩЕНИЕМ

    // Создаем третий вектор из второго путем перемещения
    Vector3D vector3;
    vector3 = move(vector2);

    // Умный указатель второго вектора должен быть удален
    if (vector2.coords != nullptr) {
        cerr << "Ошибка! Умный указатель второго вектора не уничтожился" << endl;
    }
    // Умный указатель третьего вектора должен существовать
    if (vector3.coords == nullptr) {
        cerr << "Ошибка! Умный указатель третьего вектора не существует" << endl;
    }
    
    // На всякий случай проверим значения в третьем векторе
    assert(vector3[0] == 5.2);
    assert(vector3[1] == 5.3);
    assert(vector3[2] == 5.4);

    cout << "Вектор 3, полученный через присваивание перемещением: " << vector3 << endl;

    // Создаем shared pointer на vector3;
    shared_ptr<Vector3D> vector4_ptr = make_shared<Vector3D>(vector3);
    // Нормализуем вектор, на который указывает этот указатель
    normalize_vector(vector4_ptr);
    // Получаем вектор из указателя
    auto vector4 = *vector4_ptr;    
    cout << "Нормализованный вектор 4: " << vector4 << endl;    
}

int main() {
    copy_tests();
    move_tests();
}